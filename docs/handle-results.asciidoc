= Handle Results
:description: Learn how to explore and exploit parsing results.
:jumbotron:
:icons!:
:iconsfont: font-awesome
:iconsfontdir: ./fonts/font-awesome
include::revision.asciidoc[]
include::attributes.asciidoc[]


== Use case

We are suppose in the following, study the source code below, script named +UseCase1.php+ :

[source,php]
----
<?php
include '/path/to/test1.php';
include_once 'test2.php';
require 'test3.php';
// test four
require_once
    'test4.php';

class Foo implements SplObserver
{
    const FOO = 'default FOO value';

    public function __construct()
    {
    }

    public function update(SplSubject $subject) {
    }
}

define('SOURCE1_ROOT', __DIR__);

function singleFunction( Array $someparam, stdClass $somethingelse, $lastone = NULL )
{
}
----

To explore and exploit results, we need first to parse the data source.
You should be able to do it. If it's not the case, please refer to
the link:quick-start.html[quick start] guide.

Here are the solution how to parse the data source seen above :

[source,php]
----
<?php

use Bartlett\Reflect;
use Bartlett\Reflect\ProviderManager;
use Bartlett\Reflect\Provider\SymfonyFinderProvider;
use Symfony\Component\Finder\Finder;

$dirs = dirname(__DIR__) . '/sources';

$finder = new Finder();
$finder->files()
    ->name('UseCase1.php')
    ->in($dirs);

$provider = new SymfonyFinderProvider($finder);

$pm = new ProviderManager;
$pm->set('UseCase1', $provider);

$reflect = new Reflect;
$reflect->setProviderManager($pm);
$reflect->parse();
----

== Enumerate each elements

include::enumerate-packages.asciidoc[]
include::enumerate-classes.asciidoc[]
include::enumerate-interfaces.asciidoc[]
include::enumerate-traits.asciidoc[]
include::enumerate-functions.asciidoc[]
include::enumerate-constants.asciidoc[]
include::enumerate-includes.asciidoc[]

== Exploit each elements

[role="lead"]
Reflect comes with a complete reflection API (link:features-compared.html[almost equivalent] to
http://www.php.net/manual/en/book.reflection.php[PHP5 reflection]) that adds
the ability to reverse-engineer namespaces, classes, interfaces, traits, functions,
methods, constants and includes.

include::exploit-packages.asciidoc[]
include::exploit-classes.asciidoc[]
include::exploit-interfaces.asciidoc[]
include::exploit-traits.asciidoc[]
include::exploit-functions.asciidoc[]
include::exploit-constants.asciidoc[]
include::exploit-includes.asciidoc[]


You have terminated this tutorial tour, and you are now ready to discover
some concrete use cases.

link:concrete-examples.html["Go to next chapter: Concrete Examples",role="primary",icon="glyphicon-step-forward",options="block"]
