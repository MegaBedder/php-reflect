= Setup
:description: Configuring your project and get ready for your first parsing.
:jumbotron:
:icons!:
:iconsfont: font-awesome
:iconsfontdir: ./fonts/font-awesome
include::revision.asciidoc[]
include::attributes.asciidoc[]


== Install

[role="lead"]
Reflect may be installed in several ways, choose your favorite.

[role="partintro",cols="3,9"]
.icon:download[size="7x"] [clearfix]#Reflect takes advantage of new features in PHP 5.3 or greater.#
--
[medium]*Minimal Requirements*

Before you install PHP [label label-primary]#Reflect#, you will need an operating system
with http://www.php.net[PHP] 5.3.0 or later installed,
and four loaded extensions:
http://www.php.net/manual/en/book.reflection.php[Reflection],
http://www.php.net/manual/en/book.tokenizer.php[tokenizer],
http://www.php.net/manual/en/book.pcre.php[pcre],
http://www.php.net/manual/en/book.spl.php[SPL].

[medium]*Using PEAR*

As PHP-Parser 1.0 is not planned to be distributed as a PEAR package
(https://github.com/nikic/PHP-Parser/issues/97[read more]), Reflect 2.0 will not be available on
the http://bartlett.laurent-laville.org[PEAR Bartlett Channel].

[medium]*Using Composer*

Put a file named [label label-default]#composer.json# at the root of your project, with the content below:
----
{
    "require": {
        "bartlett/php-reflect": "2.0.0"
    }
}
----
And run the following command:
----
$ php composer.phar install
----

[medium]*Using PHP Archive (phar)*

----
wget http://bartlett.laurent-laville.org/get/phpreflect.phar
chmod +x phpreflect.phar
----

--

== Autoloaders

[role="lead"]
Reflect does not provides any native autoloader.

It's up to you to choose what is be the best strategy :

* If you have installed [label label-primary]#Reflect# with http://getcomposer.org/[Composer],
it must have generated a `vendor/autoload.php` file you should used.
* If you use the phar version, you don't need autoloader, except if you want to add some user components.
* The basic PHP version requires an autoloader that can load classes that follow
the http://www.php-fig.org/psr/psr-0/[PSR-0] class naming standard.

NOTE: I recommend using Symfony http://symfony.com/doc/current/components/class_loader/index.html[ClassLoader] component.

Here are a minimum example, if you used a forked copy of GitHub source.

[source,php]
.Symfony UniversalClassLoader
----
<?php
$baseDir   = dirname(__DIR__);
$vendorDir = $baseDir . '/vendor';

require_once $vendorDir . '/nikic/php-parser/lib/bootstrap.php';
require_once $vendorDir . '/symfony/class-loader/Symfony/Component/ClassLoader/UniversalClassLoader.php';
require_once $vendorDir . '/phpunit/php-timer/PHP/Timer.php';

use Symfony\Component\ClassLoader\UniversalClassLoader;

$loader = new UniversalClassLoader();
$loader->registerNamespaces(array(
    'Symfony\\Component\\Finder'          => $vendorDir . '/symfony/finder',
    'Symfony\\Component\\EventDispatcher' => $vendorDir . '/symfony/event-dispatcher',
    'Symfony\\Component\\Console'         => $vendorDir . '/symfony/console',
    'Symfony\\Component\\ClassLoader'     => $vendorDir . '/symfony/class-loader',
    'Bartlett\\Tests\\Reflect'            => $baseDir . '/tests',
    'Bartlett'                            => $baseDir . '/src',
));
$loader->register();
----

You are now ready to parse your first data source.

link:quick-start.html["Go to next chapter: Quick Start",role="primary",icon="glyphicon-step-forward",options="block"]
